package com.eclinic.db.model;

// Generated 2015-05-03 18:58:02 by Hibernate Tools 3.4.0.CR1

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * Visit generated by hbm2java
 */
@Entity
@Table(name = "Visit")
public class Visit implements java.io.Serializable {

	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private Long id;
	private PatientCard patientCard;
	private TypeOfVisit typeOfVisit;
	private Receptionist receptionist;
	private StatusOfVisit statusOfVisit;
	private Doctor doctor;
	private Date dateOfVisit;
	private byte[] descriptionOfVisit;
	private boolean isLeave;
	private boolean special;
	private Set<SickLeave> sickLeaves = new HashSet<SickLeave>(0);

	public Visit() {
	}

	public Visit(PatientCard patientCard, TypeOfVisit typeOfVisit,
			Receptionist receptionist, StatusOfVisit statusOfVisit,
			Doctor doctor, Date dateOfVisit, boolean isLeave, boolean special) {
		this.patientCard = patientCard;
		this.typeOfVisit = typeOfVisit;
		this.receptionist = receptionist;
		this.statusOfVisit = statusOfVisit;
		this.doctor = doctor;
		this.dateOfVisit = dateOfVisit;
		this.isLeave = isLeave;
		this.special = special;
	}

	public Visit(PatientCard patientCard, TypeOfVisit typeOfVisit,
			Receptionist receptionist, StatusOfVisit statusOfVisit,
			Doctor doctor, Date dateOfVisit, byte[] descriptionOfVisit,
			boolean isLeave, boolean special, Set<SickLeave> sickLeaves) {
		this.patientCard = patientCard;
		this.typeOfVisit = typeOfVisit;
		this.receptionist = receptionist;
		this.statusOfVisit = statusOfVisit;
		this.doctor = doctor;
		this.dateOfVisit = dateOfVisit;
		this.descriptionOfVisit = descriptionOfVisit;
		this.isLeave = isLeave;
		this.special = special;
		this.sickLeaves = sickLeaves;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)
	@Column(name = "Id", unique = true, nullable = false)
	public Long getId() {
		return this.id;
	}

	public void setId(Long id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "id_patient_card", nullable = false)
	public PatientCard getPatientCard() {
		return this.patientCard;
	}

	public void setPatientCard(PatientCard patientCard) {
		this.patientCard = patientCard;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "id_type_of_visit", nullable = false)
	public TypeOfVisit getTypeOfVisit() {
		return this.typeOfVisit;
	}

	public void setTypeOfVisit(TypeOfVisit typeOfVisit) {
		this.typeOfVisit = typeOfVisit;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "id_receptionist", nullable = false)
	public Receptionist getReceptionist() {
		return this.receptionist;
	}

	public void setReceptionist(Receptionist receptionist) {
		this.receptionist = receptionist;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "id_status_of_visit", nullable = false)
	public StatusOfVisit getStatusOfVisit() {
		return this.statusOfVisit;
	}

	public void setStatusOfVisit(StatusOfVisit statusOfVisit) {
		this.statusOfVisit = statusOfVisit;
	}

	@ManyToOne(fetch = FetchType.LAZY)
	@JoinColumn(name = "id_doctor", nullable = false)
	public Doctor getDoctor() {
		return this.doctor;
	}

	public void setDoctor(Doctor doctor) {
		this.doctor = doctor;
	}

	@Temporal(TemporalType.DATE)
	@Column(name = "date_of_visit", nullable = false, length = 10)
	public Date getDateOfVisit() {
		return this.dateOfVisit;
	}

	public void setDateOfVisit(Date dateOfVisit) {
		this.dateOfVisit = dateOfVisit;
	}

	@Column(name = "description_of_visit")
	public byte[] getDescriptionOfVisit() {
		return this.descriptionOfVisit;
	}

	public void setDescriptionOfVisit(byte[] descriptionOfVisit) {
		this.descriptionOfVisit = descriptionOfVisit;
	}

	@Column(name = "is_leave", nullable = false)
	public boolean isIsLeave() {
		return this.isLeave;
	}

	public void setIsLeave(boolean isLeave) {
		this.isLeave = isLeave;
	}

	@Column(name = "special", nullable = false)
	public boolean isSpecial() {
		return this.special;
	}

	public void setSpecial(boolean special) {
		this.special = special;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "visit")
	public Set<SickLeave> getSickLeaves() {
		return this.sickLeaves;
	}

	public void setSickLeaves(Set<SickLeave> sickLeaves) {
		this.sickLeaves = sickLeaves;
	}

}
